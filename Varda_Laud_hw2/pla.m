% @author Varda Laud
% This funtion finds the weights and number of iterations at which pla
% converges.
% X: N*2 vector of points in coordinate plane
% Y: N*1 vector of labels +1 or -1
% w0(Optional): 3*1 vector of initial weights for pla generated by Linear Regression
% w: Weight vector of dimension 3*1
% iters: Number of iterations for pla to converge
function [w, iters] = pla(X, Y, w0)
if size(X, 2) ~= 2 || size(Y, 2) ~= 1 || size(X, 1) ~= size(Y, 1) || size(X, 1) < 1 || size(Y, 1) < 1
    error('Error in Input Arguments')
end
% If w0 is not passed to pla then initialize weight vector w being all
% zeros else initialize it to w0. w is a 3*1 vector
if ~exist('w0', 'var')
    w = zeros(3, 1);
else
    w = w0;
end

iters = 0;
% Set the 1st column values = 1 which are the bias terms. X is now a N*3 matrix
X = [ones(size(X, 1), 1), X];
% Continue till there are no more misclassified points
while 1
    % Loop through all rows in X and check if sign(x*w) = y
    i = 1:size(X, 1);
    result = Y(i) ~= sign(X(i, :) * w);
    % Find indices of misclassified points
    sampleIndices = find(result);
    % If no misclassified points then break the while loop
    if(isempty(sampleIndices))
        break
    end
    % Get the index of one of the misclassified points
    [sampleIndex, ~] = datasample(sampleIndices, 1);
    % Update the weights w = w + transpose(y*x)
    w = w + (Y(sampleIndex) * X(sampleIndex, :)).';
    iters = iters + 1;
end